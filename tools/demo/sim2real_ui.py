# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sim2real.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from cv2 import *
import sys
import paramiko

import open3d as o3d
import win32gui
import sys
import numpy as np
from vis import vis
from scp import SCPClient


PATH='/home/qrrr/anaconda3/envs/grasp/bin:/home/qrrr/bin:/home/qrrr/.local/bin:/home/qrrr/cuda-10.2/bin:/home/qrrr/bin:/home/qrrr/.local/bin:/home/qrrr/cuda-10.2/bin:/home/qrrr/anaconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'

def run_cmd(client, cmd):
    print(f"Executing {cmd}")
    _, stdout_, stderr_ = client.exec_command(cmd)
    # self.client.get_transport().open_session().exec_command(cmd)
    print(stdout_.read())
    status = stdout_.channel.recv_exit_status()
    print(status)
    if status == 0:
        print(f"Executed {cmd}")

class SubThread(QtCore.QThread):
    signal = QtCore.pyqtSignal(str)  # 括号里填写信号传递的参数

    def __init__(self, client, sceneId, annId, camera, source_domain):
        super(SubThread, self).__init__()
        self.client = client
        self.sceneId = sceneId
        self.annId = annId
        self.camera = camera
        self.source_domain = source_domain

    def __del__(self):
        self.wait()

    def run(self):
        """
        进行任务操作，主要的逻辑操作,返回结果
        """
        inference_cmd = f'PATH={PATH}; ' \
                        f'cd /home/qrrr/mmdetection_grasp; ' \
                        f'conda activate grasp ;' \
                        f'CUDA_VISIBLE_DEVICES=9 python tools/demo/inference.py  --scene_id {self.sceneId} --ann_id {self.annId} --camera {self.camera} --source_domain {self.source_domain}'
        run_cmd(self.client, inference_cmd)
        SCPClient(self.client.get_transport()).get('/home/qrrr/mmdetection_grasp/source.npy', '.', recursive=True)
        SCPClient(self.client.get_transport()).get('/home/qrrr/mmdetection_grasp/sim2real.npy', '.', recursive=True)
        self.signal.emit('done')  # 发射信号

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.sceneId_input = QtWidgets.QLineEdit(self.centralwidget)
        self.sceneId_input.setGeometry(QtCore.QRect(200, 50, 111, 31))
        self.sceneId_input.setObjectName("sceneId_input")
        self.sceneId_label = QtWidgets.QLabel(self.centralwidget)
        self.sceneId_label.setGeometry(QtCore.QRect(30, 50, 161, 31))
        self.sceneId_label.setAlignment(QtCore.Qt.AlignCenter)
        self.sceneId_label.setObjectName("sceneId_label")


        self.source_domain_input = QtWidgets.QComboBox(self.centralwidget)
        self.source_domain_input.addItems(['Sim-S', 'Sim-B'])
        self.source_domain_input.setGeometry(QtCore.QRect(400, 50, 111, 31))
        self.source_domain_input.setObjectName("source_domain_input")
        self.source_domain_label = QtWidgets.QLabel(self.centralwidget)
        self.source_domain_label.setGeometry(QtCore.QRect(350, 50, 50, 31))
        self.source_domain_label.setAlignment(QtCore.Qt.AlignCenter)
        self.source_domain_label.setObjectName("source_domain_label")

        self.camera_input = QtWidgets.QComboBox(self.centralwidget)
        self.camera_input.addItems(['realsense', 'kinect'])
        self.camera_input.setGeometry(QtCore.QRect(620, 50, 111, 31))
        self.camera_input.setObjectName("camera_input")
        self.camera_label = QtWidgets.QLabel(self.centralwidget)
        self.camera_label.setGeometry(QtCore.QRect(560, 50, 50, 31))
        self.camera_label.setAlignment(QtCore.Qt.AlignCenter)
        self.camera_label.setObjectName("camera_label")


        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(800, 50, 111, 31))
        self.pushButton.setObjectName("pushButton")

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(30, 100, 920, 800))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.source_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.source_label.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.source_label.setAlignment(QtCore.Qt.AlignCenter)
        self.source_label.setIndent(-1)
        self.source_label.setObjectName("source_label")
        self.verticalLayout.addWidget(self.source_label)
        self.source_img = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.source_img.setText("")
        self.source_img.setAlignment(QtCore.Qt.AlignCenter)
        self.source_img.setObjectName("source_img")
        self.verticalLayout.addWidget(self.source_img)

        # self.source_3d = QtWidgets.QLabel(self.verticalLayoutWidget)
        # self.source_3d.setText("")
        # self.source_3d.setObjectName("source_3d")
        # self.verticalLayout.addWidget(self.source_3d)
        self.vis_source = o3d.visualization.Visualizer()
        self.vis_source.create_window("Open3D_source")
        hwnd_source= win32gui.FindWindowEx(0, 0, None, "Open3D_source")
        self.window_source = QtGui.QWindow.fromWinId(hwnd_source)
        self.windowcontainer_source = MainWindow.createWindowContainer(self.window_source, self.verticalLayoutWidget)
        self.verticalLayout.addWidget(self.windowcontainer_source)


        self.verticalLayout.setStretch(1, 1)
        self.verticalLayout.setStretch(2, 1)


        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(970, 100, 920, 800))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.sim2real_label = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.sim2real_label.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.sim2real_label.setAlignment(QtCore.Qt.AlignCenter)
        self.sim2real_label.setIndent(-1)
        self.sim2real_label.setObjectName("sim2real_label")
        self.verticalLayout_2.addWidget(self.sim2real_label)
        self.sim2real_img = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.sim2real_img.setText("")
        self.sim2real_img.setAlignment(QtCore.Qt.AlignCenter)
        self.sim2real_img.setObjectName("sim2real_img")
        self.verticalLayout_2.addWidget(self.sim2real_img)


        # self.sim2real_3d = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        # self.sim2real_3d.setText("")
        # self.sim2real_3d.setAlignment(QtCore.Qt.AlignCenter)
        # self.sim2real_3d.setObjectName("sim2real_3d")
        # self.verticalLayout_2.addWidget(self.sim2real_3d)
        self.vis_sim2real = o3d.visualization.Visualizer()
        self.vis_sim2real.create_window("Open3D_sim2real")
        hwnd_sim2real = win32gui.FindWindowEx(0, 0, None, "Open3D_sim2real")
        self.window_sim2real = QtGui.QWindow.fromWinId(hwnd_sim2real)
        self.windowcontainer_sim2real = MainWindow.createWindowContainer(self.window_sim2real, self.verticalLayoutWidget_2)
        self.verticalLayout_2.addWidget(self.windowcontainer_sim2real)

        self.verticalLayout_2.setStretch(1, 1)
        self.verticalLayout_2.setStretch(2, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.timer_1 = QtCore.QTimer()
        self.timer_2 = QtCore.QTimer()


        self.pushButton.clicked.connect(self.clickButton)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "从仿真到实际迁移的平面抓取检测方法"))
        self.sceneId_label.setText(_translate("MainWindow", "场景 Id (100-189)"))
        self.camera_label.setText(_translate("MainWindow", "目标域"))
        self.source_domain_label.setText(_translate("MainWindow", "源域"))
        self.pushButton.setText(_translate("MainWindow", "抓取检测"))
        self.source_label.setText(_translate("MainWindow", "Source Only"))
        self.sim2real_label.setText(_translate("MainWindow", "Sim-to-Real"))

        self.client = paramiko.SSHClient()
        self.client.load_system_host_keys()
        self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.client.connect("115.25.142.110", username="qrrr", port=22, password="qr980414")


    def clickButton(self):
        self.sceneId = int(self.sceneId_input.text())
        self.annId = 0
        self.camera = self.camera_input.currentText()
        self.source_domain = self.source_domain_input.currentText()
        self.clear()
        if os.path.exists('source.npy') and os.path.exists('sim2real.npy'):
            self.load_result()
        else:
            self.inference(self.sceneId, self.annId, self.camera, self.source_domain)

    def inference(self, sceneId, annId, camera, source_domain):
        self.thread = SubThread(self.client, sceneId, annId, camera, source_domain)
        self.thread.signal.connect(self.load_result) #连接回调函数，接收结果
        self.thread.start()

    def load_result(self):
        self.graspnet_root = "G:/dataset/planer_graspnet"
        source_gg_array_path = 'source.npy'
        source_pcd, source_img = vis(self.graspnet_root, self.sceneId, self.annId, self.camera, source_gg_array_path)
        self.show_img(self.source_img, source_img)
        self.show_3d(self.vis_source, source_pcd)
        self.timer_1.timeout.connect(self.update_source_vis)
        self.timer_1.start(1)

        sim2real_gg_array_path = 'sim2real.npy'
        sim2real_pcd, sim2real_img = vis(self.graspnet_root, self.sceneId, self.annId, self.camera, sim2real_gg_array_path)
        self.show_img(self.sim2real_img, sim2real_img)
        self.show_3d(self.vis_sim2real, sim2real_pcd)
        self.timer_2.timeout.connect(self.update_sim2real_vis)
        self.timer_2.start(1)

    def clear(self):
        if os.path.exists('source.npy'):
            os.remove('source.npy')
        if os.path.exists('sim2real.npy'):
            os.remove('sim2real.npy')
        self.vis_source.clear_geometries()
        self.vis_sim2real.clear_geometries()
        self.source_img.clear()
        self.sim2real_img.clear()

    def show_3d(self, vis, pcd):
        vis.clear_geometries()
        for p in pcd:
            vis.add_geometry(p)

    def update_source_vis(self):
        self.vis_source.poll_events()
        self.vis_source.update_renderer()

    def update_sim2real_vis(self):
        self.vis_sim2real.poll_events()
        self.vis_sim2real.update_renderer()

    def show_img(self, label, srcImage):
        image_height, image_width, image_depth = srcImage.shape  # 获取图像的高，宽以及深度。
        # opencv读图片是BGR，qt显示要RGB，所以需要转换一下
        QImg = cv2.cvtColor(srcImage, cv2.COLOR_BGR2RGB)
        QShowImage = QImage(QImg.data, image_width, image_height,  # 创建QImage格式的图像，并读入图像信息
                            image_width * image_depth,
                            QImage.Format_RGB888)
        QShowImage = QShowImage.scaled(label.width(), label.height(),
                                       Qt.KeepAspectRatio, Qt.FastTransformation)
        label.clear()
        label.setPixmap(QPixmap.fromImage(QShowImage))

if __name__ == '__main__':
    app = QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
